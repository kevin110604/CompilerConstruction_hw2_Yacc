/* Definition section */
%{
    #include "y.tab.h"  /* header file generated by bison */

    extern YYSTYPE yylval; // YYSTYPE
    char buf[256];
    char code_line[128];

    /* This macro is used to record code line */
    #define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit           [0-9]
letter          [a-zA-Z]
integer         {digit}+
float           {digit}+"."{digit}+
id              {letter}+({letter}|{digit})*

space_or_tab    [ \t]+
star            [*]+

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {  }
"-"     {  }
"*"     {  }
"/"     {  }
"%"     {  }
"++"    {  }
"--"    {  }

 /* Relational */
">"     {  }
"<"     {  }
">="    {  }
"<="    {  }
"=="    {  }
"!="    {  }

 /* Assignment */
"="     { return ASGN; }
"+="    {  }
"-="    {  }
"*="    {  }
"/="    {  }
"%="    {  }

 /* Logical */
"&&"    {  }
"||"    {  }
"!"     {  }

 /* Delimiters */
"("     { return LB; }
")"     { return RB; }
"{"     { return LCB; }
"}"     { return RCB; }
"["     {  }
"]"     {  }
","     { return COMMA; }

 /* Print Keywords */   
"print"                 { return PRINT; }

 /* Condition and Loop Keywords */
"if"                    { return IF; }
"else"                  { return ELSE; }
"for"                   { return FOR; }
"while"                 {  }

 /* Declaration Keywords */
"void"                  { yylval.string = yytext; return VOID; }
"int"                   { yylval.string = yytext; return INT; }
"float"                 { yylval.string = yytext; return FLOAT; }
"string"                { yylval.string = yytext; return STRING; }
"bool"                  { yylval.string = yytext; return BOOL; }

 /* boolean Keywords */
"true"                  {  }
"false"                 {  }

"return"                {  }

 /* String Constant */
\"                      { BEGIN STRING_STATE; }
<STRING_STATE>\"        { BEGIN INITIAL; }
<STRING_STATE>[^"]*     {  }

 /* Number Constant */
{integer}               { yylval.string = yytext; return I_CONST; }
{float}                 { yylval.string = yytext; return F_CONST; }

 /* C type Comment */
"/*"                    { BEGIN COMMENT;
                          strcpy(code_line, yytext); }
<COMMENT>[^*\n]+        { strcpy(code_line, yytext); }
<COMMENT>\n             { printf("%d: %s\n", yylineno, code_line); 
                          strcpy(code_line, ""); }
<COMMENT>{star}         { strcpy(code_line, yytext); }
<COMMENT>"*/"           { BEGIN INITIAL;
                          strcpy(code_line, yytext); }

 /* C++ type Comment */
\/\/.*                  {  }

 /* Variable ID */
 {id}                   { yylval.string=yytext; return ID; }

 /* others */
";"                     { return SEMICOLON; }
\n                      { printf("%d: %s\n", yylineno, code_line); 
                          strcpy(code_line, ""); }
{space_or_tab}          { strcat(code_line, yytext); } /* Ignore */
[^ \t\n]                { } /* Ignore other charactor sets */
<<EOF>>                 { }

%%

int yywrap()
{
    return 1;
}

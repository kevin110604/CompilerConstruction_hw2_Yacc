/* Definition section */
%{
    /* header file generated by bison */
    #include "y.tab.h"  
    /* This macro is used to record code line */
    #define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }

    extern YYSTYPE yylval;              // YYSTYPE
    char buf[256];
    char code_line[256];

    int rcb_flag = 0;
    extern char error_msg[32];
    extern void dump_symbol();
    extern void yyerror(char *s);
    extern void parse_newline();
%}

/* Define regular expression label */
digit           [0-9]
letter          [a-zA-Z]
integer         {digit}+
float           {digit}+"."{digit}+
id              {letter}+({letter}|{digit})*

space_or_tab    [ \t]+
star            [*]

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { strcat(code_line, yytext); return ADD; }
"-"     { strcat(code_line, yytext); return SUB; }
"*"     { strcat(code_line, yytext); return MUL; }
"/"     { strcat(code_line, yytext); return DIV; }
"%"     { strcat(code_line, yytext); return MOD; }
"++"    { strcat(code_line, yytext); return INC; }
"--"    { strcat(code_line, yytext); return DEC; }

 /* Relational */
">"     { strcat(code_line, yytext); return LT; }
"<"     { strcat(code_line, yytext); return MT; }
">="    { strcat(code_line, yytext); return LTE; }
"<="    { strcat(code_line, yytext); return MTE; }
"=="    { strcat(code_line, yytext); return EQ; }
"!="    { strcat(code_line, yytext); return NE; }

 /* Assignment */
"="     { strcat(code_line, yytext); return ASGN; }
"+="    { strcat(code_line, yytext); return ADDASGN; }
"-="    { strcat(code_line, yytext); return SUBASGN; }
"*="    { strcat(code_line, yytext); return MULASGN; }
"/="    { strcat(code_line, yytext); return DIVASGN; }
"%="    { strcat(code_line, yytext); return MODASGN; }

 /* Logical */
"&&"    { strcat(code_line, yytext); return AND; }
"||"    { strcat(code_line, yytext); return OR; }
"!"     { strcat(code_line, yytext); return NOT; }

 /* Delimiters */
"("     { strcat(code_line, yytext); return LB; }
")"     { strcat(code_line, yytext); return RB; }
"{"     { strcat(code_line, yytext); return LCB; }
"}"     { strcat(code_line, yytext); rcb_flag = 1; return RCB; }
"["     {  }
"]"     {  }
","     { strcat(code_line, yytext); return COMMA; }

 /* Print Keywords */   
"print"                 { strcat(code_line, yytext); return PRINT; }

 /* Condition and Loop Keywords */
"if"                    { strcat(code_line, yytext); return IF; }
"else"                  { strcat(code_line, yytext); return ELSE; }
"for"                   { strcat(code_line, yytext); return FOR; }
"while"                 { strcat(code_line, yytext); return WHILE; }

 /* Declaration Keywords */
"void"                  { strcat(code_line, yytext);
                          yylval.string = yytext; return VOID; }
"int"                   { strcat(code_line, yytext);
                          yylval.string = yytext; return INT; }
"float"                 { strcat(code_line, yytext);
                          yylval.string = yytext; return FLOAT; }
"string"                { strcat(code_line, yytext);
                          yylval.string = yytext; return STRING; }
"bool"                  { strcat(code_line, yytext);
                          yylval.string = yytext; return BOOL; }

 /* boolean Keywords */
"true"                  { strcat(code_line, yytext); return TRUE; }
"false"                 { strcat(code_line, yytext); return FALSE; }

"return"                { strcat(code_line, yytext); return RETURN; }

 /* String Constant */
\"                      { strcat(code_line, yytext); BEGIN STRING_STATE; return STR_CONST; }
<STRING_STATE>\"        { strcat(code_line, yytext); BEGIN INITIAL; }
<STRING_STATE>[^"]*     { strcat(code_line, yytext); }

 /* Number Constant */
{integer}               { strcat(code_line, yytext);
                          yylval.string = yytext; return I_CONST; }
{float}                 { strcat(code_line, yytext);
                          yylval.string = yytext; return F_CONST; }

 /* C type Comment */
"/*"                    { BEGIN COMMENT;
                          strcat(code_line, yytext); }
<COMMENT>[^*\n]+        { strcat(code_line, yytext); }
<COMMENT>\n             { printf("%d: %s\n", yylineno, code_line); 
                          strcpy(code_line, ""); }
<COMMENT>"*"            { strcat(code_line, yytext); }
<COMMENT>"*/"           { BEGIN INITIAL;
                          strcat(code_line, yytext); }

 /* C++ type Comment */
\/\/.*                  { strcat(code_line, yytext); }

 /* Variable ID */
{id}                    { strcat(code_line, yytext);
                          strcpy(yylval.string, yytext); return ID; }

 /* others */
";"                     { strcat(code_line, yytext);
                          return SEMICOLON; }
\n                      { parse_newline(); }
{space_or_tab}          { strcat(code_line, yytext); }  // Ignore
[^ \t\n]                { }                             // Ignore other charactor sets
<<EOF>>                 { yyterminate(); }

%%

int yywrap()
{
    return 1;
}
